
from datetime import datetime, timedelta

# class User:
#     def __init__(self, user_id, username, email, password, role='user'):
#         self.user_id = user_id
#         self.username = username
#         self.email = email
#         self.password = password
#         self.role = role  # 'admin' or 'user'
#         self.favorite_songs = []  # List of favorite songs
#         self.favorite_albums = []  # List of favorite albums
#         self.is_premium = False  # Indicates if the user has Premium access
#         self.premium_expires_at = None  # Tracks when Premium access expires

#     def create_album(self, album_name, songs):
#         if self.role == 'user':
#             album = Album(album_name, self.username, songs)
#             Database.store_album(album)
#             return album
#         else:
#             raise PermissionError("Admin cannot create albums for users.")

#     def add_to_favorites(self, song):
#         if song not in self.favorite_songs:
#             self.favorite_songs.append(song)
#             print(f"Added {song.song_name} to {self.username}'s favorite songs.")

#     def activate_premium(self):
#         """Activate a 24-hour Premium trial for the user."""
#         current_time = datetime.now()
        
#         # Check if the user has already had Premium within the last 24 hours
#         if self.premium_expires_at and current_time < self.premium_expires_at:
#             remaining_time = self.premium_expires_at - current_time
#             print(f"Premium already active! Time remaining: {remaining_time}.")
#             return False  # Trial already active
        
#         # Grant Premium access for 24 hours
#         self.is_premium = True
#         self.premium_expires_at = current_time + timedelta(hours=24)
#         print(f"Premium activated for {self.username}! Expires at {self.premium_expires_at}.")
#         return True

#     def check_premium_status(self):
#         """Check if the user's Premium trial is still active."""
#         if self.is_premium and datetime.now() > self.premium_expires_at:
#             self.is_premium = False  # Automatically revert to normal user
#             self.premium_expires_at = None
#             print(f"Premium expired for {self.username}.")
#         elif self.is_premium:
#             remaining_time = self.premium_expires_at - datetime.now()
#             print(f"Premium is active! Time remaining: {remaining_time}.")
#         else:
#             print(f"{self.username} is not a Premium user.")


# class Admin(User):
#     def __init__(self, user_id, username, email, password):
#         super().__init__(user_id, username, email, password, role='admin')

#     def upload_music(self, song_name, artist, duration, file_path):
#         song = Song(len(Database.songs) + 1, song_name, artist, duration, file_path)
#         Database.store_song(song)
#         print(f"Uploaded song '{song.song_name}' by {song.artist}.")
#         return song

#     def manage_users(self, action, user):
#         # Example: action could be 'block', 'delete', 'update'
#         print(f"{action.capitalize()} user {user.username}")


# class Song:
#     def __init__(self, song_id, song_name, artist, duration, file_path=None, spotify_id=None):
#         self.song_id = song_id
#         self.song_name = song_name
#         self.artist = artist
#         self.duration = duration
#         self.file_path = file_path  # Path to local storage (if from your database)
#         self.spotify_id = spotify_id  # Spotify song ID (if from Spotify)
#         self.source = "database" if file_path else "spotify"

#     def play(self):
#         if self.source == "database":
#             print(f"Playing {self.song_name} from local database.")
#         else:
#             print(f"Playing {self.song_name} from Spotify.")


# class Video(Song):
#     def __init__(self, song_id, song_name, artist, duration, file_path, video_quality):
#         super().__init__(song_id, song_name, artist, duration, file_path)
#         self.video_quality = video_quality

#     def play_video(self):
#         print(f"Playing video for song: {self.song_name}")


# class Album:
#     def __init__(self, album_name, created_by, songs):
#         self.album_name = album_name
#         self.created_by = created_by
#         self.songs = songs

#     def add_song(self, song):
#         self.songs.append(song)
#         print(f"Added '{song.song_name}' to album '{self.album_name}'.")


# class Playlist:
#     def __init__(self, playlist_id, name, created_by):
#         self.playlist_id = playlist_id
#         self.name = name
#         self.created_by = created_by
#         self.songs = []  # List of Song objects

#     def add_song(self, song):
#         self.songs.append(song)
#         print(f"Added '{song.song_name}' to playlist '{self.name}'.")

#     def remove_song(self, song_id):
#         self.songs = [song for song in self.songs if song.song_id != song_id]
#         print(f"Song with ID {song_id} removed from playlist '{self.name}'.")


# class Chat:
#     def __init__(self, user_from, user_to, message):
#         self.user_from = user_from
#         self.user_to = user_to
#         self.message = message
#         self.timestamp = datetime.now()

#     def send_message(self):
#         print(f"{self.user_from}: {self.message}")


# class Database:
#     songs = []
#     albums = []
#     users = []

#     @staticmethod
#     def store_song(song):
#         Database.songs.append(song)
#         print(f"Stored song '{song.song_name}' in database.")

#     @staticmethod
#     def store_album(album):
#         Database.albums.append(album)
#         print(f"Stored album '{album.album_name}' in database.")

#     @staticmethod
#     def store_user(user):
#         Database.users.append(user)
#         print(f"Stored user '{user.username}' in database.")

#     @staticmethod
#     def retrieve_songs():
#         return Database.songs

#     @staticmethod
#     def retrieve_albums():
#         return Database.albums

#     @staticmethod
#     def retrieve_users():
#         return Database.users